type: edu
custom_name: stage5
files:
- name: src/machine/CoffeeMachine.java
  visible: true
  text: |
    package machine;

    import java.util.Scanner;

    public class CoffeeMachine {
        private int beans;
        private int water;
        private int milk;
        private int cups;
        private int money;

        private Scanner scan;
        public CoffeeMachine(){
            beans = 120;
            water = 400;
            milk = 540;
            cups = 9;
            money = 550;
            scan = new Scanner(System.in);
        }

        private void cupsCalc() {
            Scanner scan = new Scanner(System.in);
            System.out.println("How many cups of coffee?");
            int cups = scan.nextInt();
            System.out.println("For " + cups + " Cups you will need:");
            System.out.println(cups * 200 +"ml of water");
            System.out.println(cups * 50 +"ml of milk");
            System.out.println(cups * 15 +"g of coffee beans");
        }

        private void servingsCalc() {
            Scanner scan = new Scanner(System.in);
            System.out.println("Write how many ml of water the coffee machine has:");
            int waterPortions = (scan.nextInt()/200);
            System.out.println( "Write how many ml of milk the coffee machine has: ");
            int milkPortions = (scan.nextInt()/50);
            System.out.println("Write how many grams of coffee beans the coffee machine has: ");
            int beansPortions = (scan.nextInt()/15);
            System.out.println("Write how many cups of coffee you will need: ");
            int coffeeCups = scan.nextInt();
            int maxCups = 0;

            while (waterPortions != 0 && milkPortions != 0 && beansPortions != 0) {
                waterPortions--;
                milkPortions--;
                beansPortions--;
                maxCups++;
            }

            int result = maxCups-coffeeCups;
            if(result < 0) { //not enough cups
                System.out.println("No, I can only make "+ maxCups +"cup(s) of coffee");
            } else {
                if (result==0) {
                    System.out.println("Yes, I can make that amount of coffee");
                } else {
                    System.out.println("Yes, I can make that amount of coffee (and even "+ result +" more than that)");
                }
            }
        }

        private void state(){
            System.out.println(
                    "The coffee machine has:\n" +
                    water + " ml of water\n" +
                    milk + " ml of milk\n" +
                    beans + " g of coffee beans\n" +
                    cups + " disposable cups\n" +
                    "$"+money+" of money"
            );
        }
        private void buy(){
            System.out.println("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino: ");
            switch(scan.nextInt()){
                case 1://expresso - 250ml water, 16g beans, $4
                    if (water >= 250 && beans >= 16){
                        water = water - 250;
                        beans = beans - 16;
                        cups--;
                        money = money + 4;
                    } else {
                        System.out.println("Not enough resources");
                    }
                    break;
                case 2://latte - 350 ml water, 75ml milk, 20g beans, $7
                    if (water >= 350 && milk >= 75 && beans >= 20){
                        water = water - 350;
                        milk = milk - 75;
                        beans = beans - 20;
                        cups--;
                        money = money + 7;
                    } else {
                        System.out.println("Not enough resources");
                    }
                    break;
                case 3://cappuccino - 200ml water, 100ml milk, 12g beans, $6
                    if (water >= 200 && milk >= 100 && beans >= 12){
                        water = water - 200;
                        milk = milk - 100;
                        beans = beans - 12;
                        cups--;
                        money = money + 6;
                    } else {
                        System.out.println("Not enough resources");
                    }
                    break;
                default:
                    System.out.println("Not an option");
                    break;
            }

        }
        private void fill(){
            System.out.println("Write how many ml of water you want to add: ");
            water = water + scan.nextInt();
            System.out.println("Write how many ml of milk you want to add: ");
            milk = milk + scan.nextInt();
            System.out.println("Write how many grams of coffee beans you want to add: ");
            beans = beans + scan.nextInt();
            System.out.println("Write how many disposable cups of coffee you want to add:");
            cups = cups + scan.nextInt();
        }
        private void take(){
            System.out.println("I gave you $" + money);
            money = 0;
        }
        private void actions(){
            System.out.println("\nWrite action (buy, fill, take): ");
            switch(scan.next()){
                case "buy":
                    buy();
                    break;
                case "fill":
                    fill();
                    break;
                case "take":
                    take();
                    break;
                default:
                    System.out.println("Not an option");
                    break;
            }
        }

        public static void main(String[] args) {
            CoffeeMachine machine1 = new CoffeeMachine();
            machine1.state();
            machine1.actions();
            machine1.state();
        }
    }
  learner_created: false
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    700 - 400,
                    390 - 540,
                    80 - 120 ,
                    7 - 9,
                    0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "buy\n" +
                        "2\n" +
                        "fill\n" +
                        "1000\n" +
                        "0\n" +
                        "0\n" +
                        "0\n" +
                        "buy\n" +
                        "2\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    3000,
                    3000,
                    3000 ,
                    3000,
                    0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                        "fill\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -250,
                    0,
                    -16 ,
                    -1,
                    4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "1\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -350,
                    -75,
                    -20 ,
                    -1,
                    7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -200,
                    -100,
                    -12 ,
                    -1,
                    6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "3\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "back\n" +
                        "remaining\n" +
                        "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("Looks like you didn't print anything!");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                diffMilk == milk_ &&
                diffBeans == beans_ &&
                diffCups == cups_ &&
                diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/33/stages/179/implement#comment
status: Solved
record: 5
